2019-01-14 23:06:45.620854: Initializing project - /home/robjan/Pulpit/scala-learning
INFO     <2019-01-14 23:06:45,621> (env.py:102) - Logger initialised.
INFO     <2019-01-14 23:06:45,627> (client.py:144) - ----Initialising server----
INFO     <2019-01-14 23:06:49,080> (client.py:222) - About to connect to ws://127.0.0.1:34183/websocket with options {'subprotocols': ['jerky'], 'enable_multithread': True}
INFO     <2019-01-14 23:06:49,399> (outgoing.py:18) - send_request: 
{'callId': 1, 'req': {'typehint': 'ConnectionInfoReq'}}
INFO     <2019-01-14 23:06:54,465> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:06:54,496> (protocol.py:93) - Analyzer is ready.
INFO     <2019-01-14 23:06:54,498> (outgoing.py:18) - send_request: 
{'callId': 2,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallBackFunctions.scala',
                   '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
INFO     <2019-01-14 23:06:54,905> (protocol.py:80) - Connected to the ensime server 1.9.6 through websocket. Please wait while we get the analyzer and indexer ready. Indexing files may take a while and consequently the context menu commands may take longer to get enabled. You may check the server.log to see what's currently indexing or if any error occured while indexing.
INFO     <2019-01-14 23:06:58,337> (protocol.py:85) - 105 : Initializing Analyzer. Please wait...
INFO     <2019-01-14 23:06:58,338> (protocol.py:85) - 105 : Initializing Analyzer. Please wait...
WARNING  <2019-01-14 23:06:58,690> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:07:01,273> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:07:08,776> (outgoing.py:18) - send_request: 
{'callId': 3,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:07:08,802> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:07:09,557> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:08:05,885> (protocol.py:89) - Indexer is ready. Context menu commands are alive! :D
INFO     <2019-01-14 23:08:29,439> (outgoing.py:18) - send_request: 
{'callId': 4,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:08:29,469> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:08:29,733> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:08:34,860> (outgoing.py:18) - send_request: 
{'callId': 5,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:08:34,901> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:08:35,203> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:08:38,265> (outgoing.py:18) - send_request: 
{'callId': 6,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'point': 581,
         'typehint': 'SymbolAtPointReq'}}
INFO     <2019-01-14 23:08:38,521> (outgoing.py:18) - send_request: 
{'callId': 7,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/.ensime_cache/dep-src/source-jars/scala/Double.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:08:38,537> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:08:38,786> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:08:45,817> (outgoing.py:18) - send_request: 
{'callId': 8,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'point': 540,
         'typehint': 'SymbolAtPointReq'}}
INFO     <2019-01-14 23:08:46,679> (outgoing.py:18) - send_request: 
{'callId': 9,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'point': 540,
         'typehint': 'SymbolAtPointReq'}}
INFO     <2019-01-14 23:08:49,545> (outgoing.py:18) - send_request: 
{'callId': 10,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'point': 544,
         'typehint': 'SymbolAtPointReq'}}
INFO     <2019-01-14 23:08:51,798> (outgoing.py:18) - send_request: 
{'callId': 11,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'point': 542,
         'typehint': 'SymbolAtPointReq'}}
INFO     <2019-01-14 23:09:05,305> (outgoing.py:18) - send_request: 
{'callId': 12,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:09:05,346> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:09:05,500> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:09:52,627> (outgoing.py:18) - send_request: 
{'callId': 13,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:09:52,667> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:09:52,819> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:12:42,115> (outgoing.py:18) - send_request: 
{'callId': 14,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:12:42,164> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:12:42,314> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:12:53,398> (outgoing.py:18) - send_request: 
{'callId': 15,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 576, 'to': 576},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:12:53,418> (protocol.py:255) - Found type <none>
INFO     <2019-01-14 23:12:59,497> (outgoing.py:18) - send_request: 
{'callId': 16,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:12:59,539> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:12:59,678> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:13:00,009> (outgoing.py:18) - send_request: 
{'callId': 17,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:13:00,025> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:13:00,159> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:13:05,470> (outgoing.py:18) - send_request: 
{'callId': 18,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:13:05,511> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:13:05,638> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:13:29,496> (outgoing.py:18) - send_request: 
{'callId': 19,
 'req': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala',
         'maxResults': 10,
         'names': ['p11'],
         'point': 567,
         'typehint': 'ImportSuggestionsReq'}}
INFO     <2019-01-14 23:13:35,016> (outgoing.py:18) - send_request: 
{'callId': 20,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
INFO     <2019-01-14 23:13:35,029> (outgoing.py:18) - send_request: 
{'callId': 21,
 'req': {'interactive': False,
         'params': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala',
                    'typehint': 'OrganiseImportsRefactorDesc'},
         'procId': 1,
         'typehint': 'RefactorReq'}}
WARNING  <2019-01-14 23:13:35,066> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:13:35,217> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:13:35,247> (protocol.py:85) - 105 : Initializing Analyzer. Please wait...
WARNING  <2019-01-14 23:13:35,612> (protocol.py:239) - Couldn't parse diff_file: /tmp/ensime-diff-6649632020124501938.tmp
INFO     <2019-01-14 23:13:35,797> (outgoing.py:18) - send_request: 
{'callId': 22,
 'req': {'interactive': False,
         'params': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala',
                    'typehint': 'OrganiseImportsRefactorDesc'},
         'procId': 2,
         'typehint': 'RefactorReq'}}
INFO     <2019-01-14 23:13:35,978> (protocol.py:85) - 105 : Initializing Analyzer. Please wait...
WARNING  <2019-01-14 23:13:36,254> (protocol.py:239) - Couldn't parse diff_file: /tmp/ensime-diff-2658461084626083876.tmp
INFO     <2019-01-14 23:14:49,108> (outgoing.py:18) - send_request: 
{'callId': 23,
 'req': {'file': {'file': '/home/robjan/.config/sublime-text-3/Packages/Ensime/Ensime.sublime-settings'},
         'point': 951,
         'typehint': 'SymbolAtPointReq'}}
WARNING  <2019-01-14 23:14:49,322> (protocol.py:72) - Response has not been handled: 
{'description': 'File does not exist: RawFile(/home/robjan/.config/sublime-text-3/Packages/Ensime/Ensime.sublime-settings)',
 'typehint': 'EnsimeServerError'}
INFO     <2019-01-14 23:14:51,365> (outgoing.py:18) - send_request: 
{'callId': 24,
 'req': {'file': {'file': '/home/robjan/.config/sublime-text-3/Packages/Ensime/Ensime.sublime-settings'},
         'range': {'from': 1023, 'to': 1023},
         'typehint': 'TypeAtPointReq'}}
WARNING  <2019-01-14 23:14:51,387> (protocol.py:72) - Response has not been handled: 
{'description': 'File does not exist: RawFile(/home/robjan/.config/sublime-text-3/Packages/Ensime/Ensime.sublime-settings)',
 'typehint': 'EnsimeServerError'}
INFO     <2019-01-14 23:15:19,134> (outgoing.py:18) - send_request: 
{'callId': 25,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:15:19,153> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:15:19,325> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:15:31,251> (outgoing.py:18) - send_request: 
{'callId': 26,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:15:31,275> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:15:31,439> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:15:39,162> (outgoing.py:18) - send_request: 
{'callId': 27,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:15:39,175> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:15:39,346> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:15:43,504> (outgoing.py:18) - send_request: 
{'callId': 28,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:15:43,526> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:15:43,680> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:15:46,323> (outgoing.py:18) - send_request: 
{'callId': 29,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:15:46,372> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:15:46,476> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:16:46,972> (outgoing.py:18) - send_request: 
{'callId': 30,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 537, 'to': 537},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:16:47,004> (protocol.py:255) - Found type (x: Any) => Unit
INFO     <2019-01-14 23:16:47,507> (outgoing.py:18) - send_request: 
{'callId': 31,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 537, 'to': 537},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:16:47,526> (protocol.py:255) - Found type (x: Any) => Unit
INFO     <2019-01-14 23:16:51,784> (outgoing.py:18) - send_request: 
{'callId': 32,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 536, 'to': 536},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:16:51,818> (protocol.py:255) - Found type (x: Any) => Unit
INFO     <2019-01-14 23:16:58,929> (outgoing.py:18) - send_request: 
{'callId': 33,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 441, 'to': 441},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:16:59,045> (protocol.py:255) - Found type scala.collection.immutable.List[scala.Symbol]
INFO     <2019-01-14 23:17:03,598> (outgoing.py:18) - send_request: 
{'callId': 34,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 442, 'to': 442},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:17:04,469> (protocol.py:255) - Found type scala.collection.immutable.List[scala.Symbol]
INFO     <2019-01-14 23:17:05,001> (outgoing.py:18) - send_request: 
{'callId': 35,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 441, 'to': 441},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:17:05,040> (protocol.py:255) - Found type scala.collection.immutable.List[scala.Symbol]
INFO     <2019-01-14 23:17:08,723> (outgoing.py:18) - send_request: 
{'callId': 36,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 446, 'to': 446},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:17:08,750> (protocol.py:255) - Found type (xs: A*) => List[A]
INFO     <2019-01-14 23:17:09,492> (outgoing.py:18) - send_request: 
{'callId': 37,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'range': {'from': 447, 'to': 447},
         'typehint': 'TypeAtPointReq'}}
INFO     <2019-01-14 23:17:09,520> (protocol.py:255) - Found type (xs: A*) => List[A]
INFO     <2019-01-14 23:17:10,961> (outgoing.py:18) - send_request: 
{'callId': 38,
 'req': {'file': {'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'},
         'point': 447,
         'typehint': 'SymbolAtPointReq'}}
INFO     <2019-01-14 23:17:11,022> (outgoing.py:18) - send_request: 
{'callId': 39,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/.ensime_cache/dep-src/source-jars/scala/collection/immutable/List.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:17:11,039> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:17:11,782> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:17:26,240> (outgoing.py:18) - send_request: 
{'callId': 40,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/exercises/ex_9.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:17:26,278> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:17:26,398> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:17:28,907> (outgoing.py:18) - send_request: 
{'callId': 41,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:17:28,920> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:17:29,119> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:17:40,901> (outgoing.py:18) - send_request: 
{'callId': 42,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:17:40,916> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:17:41,087> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
INFO     <2019-01-14 23:18:46,748> (outgoing.py:18) - send_request: 
{'callId': 43,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  p\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1220,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:18:47,257> (outgoing.py:18) - send_request: 
{'callId': 44,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  p\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 100,
         'point': 1220,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:18:47,421> (outgoing.py:18) - send_request: 
{'callId': 45,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  plac\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1223,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:18:47,929> (outgoing.py:18) - send_request: 
{'callId': 46,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  plac\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 100,
         'point': 1223,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:18:48,043> (commands.py:92) - Search for more suggestions either completed or was cancelled.
INFO     <2019-01-14 23:18:57,412> (outgoing.py:18) - send_request: 
{'callId': 47,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placea\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1225,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:18:57,993> (commands.py:92) - Search for more suggestions either completed or was cancelled.
INFO     <2019-01-14 23:19:01,353> (outgoing.py:18) - send_request: 
{'callId': 48,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(d)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1246,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:01,859> (outgoing.py:18) - send_request: 
{'callId': 49,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(d)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 100,
         'point': 1246,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:06,540> (outgoing.py:18) - send_request: 
{'callId': 50,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(l)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1246,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:07,070> (outgoing.py:18) - send_request: 
{'callId': 51,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(l)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 100,
         'point': 1246,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:07,219> (outgoing.py:18) - send_request: 
{'callId': 52,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(list)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1249,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:10,732> (outgoing.py:18) - send_request: 
{'callId': 53,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(listOrder)(u)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1257,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:11,247> (outgoing.py:18) - send_request: 
{'callId': 54,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(listOrder)(u)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 100,
         'point': 1257,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:11,449> (outgoing.py:18) - send_request: 
{'callId': 55,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(listOrder)(us)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1258,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:12,228> (outgoing.py:18) - send_request: 
{'callId': 56,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(listOrder)(usdToGbpt)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1265,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:14,486> (outgoing.py:18) - send_request: 
{'callId': 57,
 'req': {'caseSens': True,
         'fileInfo': {'contents': 'package com.tutorial.chapter3\n\nimport scala.util.Random\n\nobject CallByNameFunction extends App {\n  val listOrder = List(("Glazed Donut", 5, 2.50), ("Vanilla Donut", 10, 3.50))\n\n  // loop over all elements in list\n  def placeOrder(orders: List[(String, Int, Double)])(\n      exchangeRate: Double): Double = {\n    var totalCost = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._1} = $costOfItem")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // call-by-name function\n  def placeOrderWithByNameParam(orders: List[(String, Int, Double)])(\n      exchangeRate: => Double): Double = {\n    var totalCost: Double = 0.0\n    orders.foreach { order =>\n      val costOfItem = order._2 * order._3 * exchangeRate\n      println(s"Cost of ${order._2} ${order._1} = ${costOfItem}")\n      totalCost += costOfItem\n    }\n    totalCost\n  }\n\n  // convert USD to GBP\n  val randomExchangeRate = new Random(10)\n\n  def usdToGbp: Double = {\n    val rate = randomExchangeRate.nextDouble()\n    println("Fetching USD to GBP exchange rate = %.4f".format(rate))\n    rate\n  }\n\n  placeOrder(listOrder)(usdToGbp)\n  placeOrderWithByNameParam(listOrder)(usdToGbp)\n\n\n  placeOrderWithByNameParam(listOrder)(usdTo)\n\n}\n',
                      'file': '/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'},
         'maxResults': 5,
         'point': 1261,
         'reload': False,
         'typehint': 'CompletionsReq'}}
INFO     <2019-01-14 23:19:27,791> (outgoing.py:18) - send_request: 
{'callId': 58,
 'req': {'files': ['/home/robjan/Pulpit/scala-learning/src/main/scala/com/tutorial/chapter3/CallByNameFunction.scala'],
         'typehint': 'TypecheckFilesReq'}}
WARNING  <2019-01-14 23:19:27,828> (protocol.py:72) - Response has not been handled: 
{'typehint': 'VoidResponse'}
INFO     <2019-01-14 23:19:27,983> (protocol.py:110) - Handled FullTypecheckCompleteEvent. Redrawing highlights.
